.. Copyright (C) 2018  Dridi Boukelmoune
..
.. This program is free software: you can redistribute it and/or modify
.. it under the terms of the GNU General Public License as published by
.. the Free Software Foundation, either version 3 of the License, or
.. (at your option) any later version.
..
.. This program is distributed in the hope that it will be useful,
.. but WITHOUT ANY WARRANTY; without even the implied warranty of
.. MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.. GNU General Public License for more details.
..
.. You should have received a copy of the GNU General Public License
.. along with this program.  If not, see <http://www.gnu.org/licenses/>.

=======
libbjxa
=======

------------------------------
BandJAM XA audio codec library
------------------------------

:Title upper: BJXA
:Manual section: 3

PROLOG
======

The goal of **libbjxa** is to provide a portable and clean interface to
interact with BandJAM XA audio files. It provides a decoder that can convert
any XA file to a PCM stream of 16 bits samples.

It is a replacement for the **xadec.dll** library that was shipped with
BandJAM with a license allowing to use it for free of charge projects but its
source code is unavailable and the Windows library only exists for 32 bit x86
systems.

SYNOPSIS
========

| **#include <stdint.h>**
| **#include <stdio.h>**
| **#include <unistd.h>**
|
| **#include <bjxa.h>**
|
| **typedef struct bjxa_decoder bjxa_decoder_t;**
|
| **typedef struct {**
|     **uint32_t    data_len_pcm;**
|     **uint32_t    blocks;**
|     **uint8_t     block_size_pcm;**
|     **uint8_t     block_size_xa;**
|     **uint16_t    samples_rate;**
|     **uint8_t     sample_bits;**
|     **uint8_t     channels;**
| **} bjxa_format_t;**
|
| **bjxa_decoder_t * bjxa_decoder(void);**
| **int bjxa_free_decoder(bjxa_decoder_t \*\***\ *decp*\ **);**
|
| **ssize_t bjxa_parse_header(bjxa_decoder_t \***\ *dec*\ **,** \
      **const void \***\ *src*\ **, size_t** *len*\ **);**
| **ssize_t bjxa_fread_header(bjxa_decoder_t \***\ *dec*\ **,** \
      **FILE \***\ *file*\ **);**
|
| **ssize_t bjxa_dump_riff_header(bjxa_decoder_t \***\ *dec*\ **,** \
      **void \***\ *dst*\ **, size_t** *len*\ **);**
| **ssize_t bjxa_fwrite_riff_header(bjxa_decoder_t \***\ *dec*\ **,** \
      **FILE \***\ *file*\ **);**
|
| **int bjxa_decode_format(bjxa_decoder_t \***\ *dec*\ **,** \
      **bjxa_format_t \***\ *fmt*\ **);**
| **int bjxa_decode(bjxa_decoder_t \***\ *dec*\ **,** \
      **void \***\ *dst*\ **, size_t** *dst_len*\ **,** \
      **const void \***\ *src*\ **, size_t** *src_len*\ **);**

DESCRIPTION
===========

**bjxa_decoder()** allocates a decoder for a single XA file at a time.

**bjxa_free_decoder()** takes a pointer to a decoder, frees the decoder and
clears the pointer.

**bjxa_parse_header()** and **bjxa_fread_header()** parse the header of an XA
file respectively from memory or from a file. On success, the decoder is ready
to convert samples. A used decoder can parse a new XA header at any time, even
in the middle of a conversion. The state of the decoder is updated atomically
only on success.

**bjxa_dump_riff_header()** and **bjxa_fwrite_riff_header()** write a RIFF
header of a WAVE file respectively to memory or to a file. Such a header
followed by the data produced by **bjxa_decode()** produces a valid WAV file.

**bjxa_decode_format()** takes a decoder in a ready state and fills a
**bjxa_format_t** structure with information about the XA file. This
information can then be used to drive the decoding using **bjxa_decode()**.

**bjxa_decode()** decodes XA blocks read from *src* to PCM samples written to
*dst*. Stereo PCM samples are interleaved and both channels interpreted as a
single block. The number of blocks reported by **bjxa_format_t** are effective
blocks, meaning that two XA blocks needed to decode one stereo PCM "block" is
considered a single block because of the interleaving. The last PCM block may
be truncated if the number of remaining samples is less than the contents of a
full XA block. The field *data_len_pcm* can be used to keep track of how many
bytes were decoded over iterations.

RETURN VALUE
============

On success, a scalar greater or equal to zero or a valid pointer is returned.
A function returns either zero or a value greater than zero on success, so
only functions where the return value means more than just success are
described below.

On error, -1 or **NULL** is returned, and *errno* is set appropriately.

**bjxa_parse_header()** and **bjxa_fread_header()** return the number of bytes
read. On success this value is always 32 because XA files have a fixed-size
header.

**bjxa_dump_riff_header()** and **bjxa_fwrite_riff_header()** return the
number of bytes written.

**bjxa_decode()** returns the number of effective blocks decoded. The number
of bytes read from *src* and written to *dst* can be computed using the
*block_size_xa* and *block_size_pcm* fields.

ERRORS
======

**EINVAL**

	*decp* is a null pointer or is not a pointer to a valid decoder.

	*dec* is null or not a valid decoder.

	**bjxa_parse_header()** got a null *src*.

	**bjxa_fread_header()** got a null *file*.

	**bjxa_dump_riff_header()** got a *dec* not in a ready state.

	**bjxa_dump_riff_header()** got a null *dst*.

	**bjxa_fwrite_riff_header()** got a *dec* not in a ready state.

	**bjxa_fwrite_riff_header()** got a null *file*.

	**bjxa_decode_format()** got a *dec* not in a ready state.

	**bjxa_decode_format()** got a null *fmt*.

	**bjxa_decode()** got a *dec* not in a ready state.

	**bjxa_decode()** got a null *dst*.

	**bjxa_decode()** got a null *src*.

**ENOBUFS**

	**bjxa_parse_header()** got a *len* lower than 32, so the memory
	buffer can't hold a complete XA header.

	**bjxa_dump_riff_header()** got a *len* too low, so the memory
	buffer can't hold a complete RIFF header.

	**bjxa_decode()** got a *dst_len* lower than *block_size_pcm*, so the
	memory buffer *dst* can't hold a complete PCM block.

	**bjxa_decode()** got a *src_len* lower than *block_size_xa*, so the
	memory buffer *src* can't hold a complete XA block.

**ENODATA**

	**bjxa_fread_header()** could not read a complete XA header.

**ENOMEM**

	**bjxa_decoder()** could not allocate a decoder.

**EPROTO**

	**bjxa_parse_header()** could not parse a valid XA header.

	**bjxa_fread_header()** could not parse a valid XA header.

	**bjxa_decode()** got an invalid XA block.

EXAMPLE
=======

The following code demonstrates the conversion of one XA file to a WAV file
using a decoder:

.. include:: @builddir@/bjxa_decode.c.txt
    :literal:

BUGS
====

**libbjxa** does not support the *nLoopPtr* field from the XA file header.

SEE ALSO
========

**bjxa**\(1),
**bjxa**\(5)
